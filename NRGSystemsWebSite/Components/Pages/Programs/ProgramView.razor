@page "/ProgramView/{title}"

@using NRGSystemsWebSite;
@using NRGSystemsWebSite.Models;
@using NRGSystemsWebSite.Services
@inject FunctionRestService apiClient
@inject NavigationManager NavigaitonManager

@rendermode InteractiveServer

<AuthorizeView Roles="administrator">
    <Authorized>
    <table class="table">
        <tr>
            <button @onclick="EditThisProgram">Edit Program</button>
            <button @onclick="Cancel">Cancel</button>
            <button @onclick="StartTraining">Start Training</button>
        </tr>
    </table>
    </Authorized>
</AuthorizeView>

<AuthorizeView Roles="client">
    <Authorized>
    <table class="table">
        <tr>
            <button @onclick="Cancel">Cancel</button>
            <button @onclick="StartTraining">Start Training</button>
        </tr>
    </table>
    </Authorized>
</AuthorizeView>


<th class="form-label">@title</th>

@if (AllProgramExercises is null)
{
    <p><em>Loading ..........</em></p>
}
else
{

    <table class="table" style="color:aliceblue">
        <thead>
            <tr>
                <th> Exercise </th>
                <th> Weights </th>
                <th> Reps </th>
            </tr>
        </thead>

        <tbody>
            @foreach (var program in AllProgramExercises)
            {
                <tr>
                    <td> @program.NameOfExercise  </td>
                    <td> @program.Weights </td>
                    <td> @program.Repetitions </td>
                </tr>
            }
        </tbody>
    </table>
}
@code {
    [Parameter]
    public string title { get; set; }
    [Parameter]
    public static List<ClientsProgram> AllProgramExercises { get; set; } = new();
    [Parameter]
    public int i { get; set; } = 0;

    List<string> tempTitleList = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        i = 0;
        AllProgramExercises = [];
        var aListOfPrograms = await Task.Run(() => apiClient.GetProgramListByTitle(title));
        foreach (var program in aListOfPrograms) //  ProgramList.ListOfPrograms)
        {
            if (program.ProgramTitle == title)
            {
                AllProgramExercises.Add(program);
            }
        }
    }

    void EditThisProgram()
    {
        NavigaitonManager.NavigateTo($"CreateProgramFromTemplate/{title}");
    }
    void Cancel()
    {
        NavigaitonManager.NavigateTo($"ProgramList");
    }
    private void StartTraining(MouseEventArgs e)
    {
        NavigaitonManager.NavigateTo($"trainClient/{title}");
    }
}
